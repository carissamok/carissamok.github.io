{"version":3,"sources":["config.js","hash.js","Player.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","props","backgroundStyles","backgroundImage","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","src","alt","name","artists","is_playing","style","App","Component","constructor","super","this","state","token","no_data","getCurrentlyPlaying","bind","tick","componentDidMount","_token","access_token","setState","interval","setInterval","componentWillUnmount","clearInterval","$","type","beforeSend","xhr","setRequestHeader","success","data","render","logo","href","join","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2240b3be.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"a4bcdd8621fb4efbbfd97e3b8ca94081\";\nexport const redirectUri = \"https://carissamok.github.io\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n];\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React from \"react\";\nimport \"./Player.css\";\n\nconst Player = props => {\n  const backgroundStyles = {\n    backgroundImage:`url(${\n      props.item.album.images[0].url\n    })`,\n  };\n\n  const progressBarStyles = {\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img src={props.item.album.images[0].url} alt=\"progress bar\"/>\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{props.item.name}</div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div className=\"progress__bar\" style={progressBarStyles} />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./Player\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && !this.state.no_data && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n          )}\n          {this.state.no_data && (\n            <p>\n              You need to be playing a song on Spotify, for something to appear here.\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}